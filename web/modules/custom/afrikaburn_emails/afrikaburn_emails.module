<?php

/**
 * @file
 * Contains \Drupal\afrikaburn_emails\AfrikaBurnEmailPermissions.
 */

use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Mail\MailManagerInterface;
use Drupal\Component\Utility\SafeMarkup;
use Drupal\Component\Utility\Html;

/**
 * Implements hook_entity_insert().
 */
function afrikaburn_emails_entity_insert(EntityInterface $entity){
  _afrikaburn_emails_notify($entity, 'create');
}

/**
 * Implements hook_entity_update().
 */
function afrikaburn_emails_entity_update(EntityInterface $entity){
  _afrikaburn_emails_notify($entity, 'update');
}

/**
 * Implements hook_mail().
 */
function afrikaburn_emails_mail($key, &$message, $params) {
  if ($key === 'ab_notification') {
    $message['from'] = \Drupal::config('system.site')->get('mail');
    $message['subject'] = $params['subject'];
    $message['body'][] = Html::escape($params['message']);
  }
}

// --- Message utilities

/**
 * Sends emails to notify users of actions
 * @param  [object] $entity Entity object being operated on
 * @param  [string] $action Action being performed
 */
function _afrikaburn_emails_notify($entity, $action){

  $token_service = \Drupal::token();  
  $configs = _afrikaburn_emails_get_config($entity, $action);

  if ($configs) {
    foreach($configs as $config){
      $recipients = _afrikaburn_emails_addresses($entity, $config['recipients']);
      $recipients = implode(', ', $recipients);
      $message = \Drupal::token()->replace(
        $config['template'], 
        [
          $config['key'][1] => $entity
        ]
      );

      $result = \Drupal::service('plugin.manager.mail')->mail(
        'afrikaburn_emails', 
        'ab_notification', 
        $recipients,
        \Drupal::currentUser()->getPreferredLangcode(),
        [
          'subject' => $config['subject'],
          'message' => $message,
        ],
        NULL, 
        TRUE
      );

      $result['result']
        ? \Drupal::logger('mail-log')->notice('Mail sent to ' . $recipients)     
        : \Drupal::logger('mail-log')->notice('Mail send fail');
    }
  }
}

// --- Recipient utilities

/**
 * Retrieves all recipients for a notification
 * @param  [object] $entity       Entity object being operated on
 * @param  [string] $recipients   Comma delimited string of recipient types
 * @return [array]                Array of email addresses
 */
function _afrikaburn_emails_addresses($entity, $recipients){

  $addresses = [];

  foreach(explode(',', $recipients) as $recipient){
    if (in_array($recipient, ['author', 'group'])) {
      $function = '_afrikaburn_emails_recipient_' . $recipient;
      $addresses += $function($entity);
    } else {
      $addresses[$recipient] = $recipient;
    }
  }

  return $addresses;
}

/**
 * Retrieves an author email address
 * @param  [object] $entity   Entity object being operated on
 * @return [array]            Array of email addresses
 */
function _afrikaburn_emails_recipient_author($entity){
  switch($entity->getEntityType()->id()){
    case 'user': $mail = $entity->getEmail(); return [$mail => $mail];
    case 'node': $mail = $entity->getOwner()->getEmail(); return [$mail => $mail];
    default: return [];
  }
}

/**
 * Retrieves a list of group member email addresses
 * @param  [object] $entity       Entity object being operated on
 * @return [array]            Array of email addresses
 */
function _afrikaburn_emails_recipient_group($entity){

  $addresses = [];
  $members = $entity 
    ->get('field_collective')
    ->first()
    ->get('entity')
    ->getTarget()    
    ->get('field_col_members')
    ->referencedEntities();

  foreach ($members as $member) {
    $email = $member->getEmail();
    $addresses[$email] = $email;
  }

  return $addresses;
}

// --- Config Utilities

/**
 * Retrieves the messaging configuration for an entity/action pair
 * @param  [object] $entity Entity object being operated on
 * @param  [string] $action Action being performed
 * @return [array|FALSE] configuration or FALSE if non-existent
 */
function _afrikaburn_emails_get_config($entity, $action){

  $config = \Drupal::config('afrikaburn_emails.settings');
  $message_definition = $config->get('message_definition');
  $target_key = _afrikaburn_emails_message_key($entity, $action);
  $matches = [];

  preg_match_all("/^" . $target_key . "\|.*$/m", $message_definition, $matches);

  $configs = FALSE;
  foreach($matches[0] as $match){
    if (substr_count($match, '|')) {
      list($key, $subject, $recipient) = explode('|', trim($match));
      $configs[] = [
        'key' => explode(':', $key),
        'subject' => $subject,
        'template' => $config->get($key),
        'recipients' => $recipient,
      ];      
    }
  }

  return $configs;
}

/**
 * Constructs a message key
 * @param  [object] $entity Entity object being operated on
 * @param  [string] $action Action being performed
 * @return [string]         Constructed configuration key
 */
function _afrikaburn_emails_message_key($entity, $action){

  $parts = [
    $action,
    $entity->getEntityTypeId(),
    $entity->bundle(),
  ];

  return implode(':', array_filter($parts));
}
